{
    "builder": "SIoTRxBuilder",
    "description": "## Theory\r\n***Actions*** are the third extension of SIoTRx over FreeMarker. They are synchronous processes that can perform any task.\r\n\r\nThey can be used by the @action tag with an output variable (it can have any name you like) and the attributes **type**, **data** and **conf** attributes. In one hand is **type** which specifies the type of action to performmust and must be one from the listed in the [Helio Developers GUI](https:\/\/helio-dev.linkeddata.es\/marketplace) . On the other hand, **data** is the action input and **conf** is a set of arguments required for the selected action type.\r\n```\r\n<@action type=\"ActionType\" data=Data conf=Configuration; output>\r\n[=output]\r\n<\/@action>\r\n```\r\nMore information about actions can be found on the tutorial on actions section.\r\n## Hands-on\r\n### Task\r\nLet's try with an easy one. Given an RDF similar to the previous tutorial on the *rdf* variable  and the SPARQL action structure, complete the sparql query to retrieve the triplets with a surface value greater than 50.",
    "user_template": "<#assign locations=providers(\"HttpProvider\", { \"method\" : \"GET\", \"url\" : \"https:\/\/raw.githubusercontent.com\/helio-ecosystem\/helio-ecosystem\/main\/resources\/mappings-data\/ldac\/nested_locations1.json\"})>\r\n<#assign locations = locations?eval>\r\n<#assign rdf>\r\n<#list locations as location>\r\n<http:\/\/sample.com\/resource\/[=location.name]> a <http:\/\/schema.org\/Place>;\r\n    <http:\/\/xmlns.com\/foaf\/0.1\/name> \"[=location.name]\" ;\r\n    <http:\/\/vocab.es\/schema#surface> [=location.features.surface.value] .\r\n<\/#list>\r\n<\/#assign>\r\n\r\n<-- WRITE THE QUERY INSIDE THE BRACKETS -->\r\n<#assign query>\r\n\"select * where {\r\n}\"\r\n<\/#assign>\r\n\r\n<#assign config = '{\"query\" : [=query] }'>\r\n<@action type=\"SparqlEngine\" data=rdf conf=config; result>\r\n[=result]\r\n<\/@action>",
    "solution_template": "<#assign locations=providers(\"HttpProvider\", { \"method\" : \"GET\", \"url\" : \"https:\/\/raw.githubusercontent.com\/helio-ecosystem\/helio-ecosystem\/main\/resources\/mappings-data\/ldac\/nested_locations1.json\"})>\r\n<#assign locations = locations?eval>\r\n<#assign rdf>\r\n<#list locations as location>\r\n<http:\/\/sample.com\/resource\/[=location.name]> a <http:\/\/schema.org\/Place>;\r\n    <http:\/\/xmlns.com\/foaf\/0.1\/name> \"[=location.name]\" ;\r\n    <http:\/\/vocab.es\/schema#surface> [=location.features.surface.value] .\r\n<\/#list>\r\n<\/#assign>\r\n\r\n<-- WRITE THE QUERY INSIDE THE BRACKETS -->\r\n<#assign query>\r\n\"select * where {\r\n    ?s ?p ?o\r\n    FILTER(?o > 50)\r\n}\"\r\n<\/#assign>\r\n\r\n<#assign config = '{\"query\" : [=query] }'>\r\n<@action type=\"SparqlEngine\" data=rdf conf=config; result>\r\n[=result]\r\n<\/@action>",
    "expected_result": "{ \"head\": {\r\n    \"vars\": [ \"s\" , \"p\" , \"o\" ]\r\n  } ,\r\n  \"results\": {\r\n    \"bindings\": [\r\n      { \r\n        \"s\": { \"type\": \"uri\" , \"value\": \"http:\/\/sample.com\/resource\/Bock\" } ,\r\n        \"p\": { \"type\": \"uri\" , \"value\": \"http:\/\/vocab.es\/schema#surface\" } ,\r\n        \"o\": { \"type\": \"literal\" , \"datatype\": \"http:\/\/www.w3.org\/2001\/XMLSchema#decimal\" , \"value\": \"73.74\" }\r\n      } ,\r\n      { \r\n        \"s\": { \"type\": \"uri\" , \"value\": \"http:\/\/sample.com\/resource\/Iowa\" } ,\r\n        \"p\": { \"type\": \"uri\" , \"value\": \"http:\/\/vocab.es\/schema#surface\" } ,\r\n        \"o\": { \"type\": \"literal\" , \"datatype\": \"http:\/\/www.w3.org\/2001\/XMLSchema#decimal\" , \"value\": \"167.2\" }\r\n      } ,\r\n      { \r\n        \"s\": { \"type\": \"uri\" , \"value\": \"http:\/\/sample.com\/resource\/Oneonta\" } ,\r\n        \"p\": { \"type\": \"uri\" , \"value\": \"http:\/\/vocab.es\/schema#surface\" } ,\r\n        \"o\": { \"type\": \"literal\" , \"datatype\": \"http:\/\/www.w3.org\/2001\/XMLSchema#decimal\" , \"value\": \"90.16\" }\r\n      }\r\n    ]\r\n  }\r\n}"
}
